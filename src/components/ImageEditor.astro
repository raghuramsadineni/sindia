---
// src/components/ImageEditor.astro
---

<div class="w-full">
    <h2 class="text-2xl font-['Cormorant_Garamond',_serif] text-[#b22222] mb-6">Image Editor</h2>
    
    <div class="mb-8">
      <div id="imageDropArea" class="border-2 border-dashed border-gray-300 p-8 text-center rounded-lg cursor-pointer transition duration-300 ease-in-out bg-gray-50 hover:border-[#b22222] hover:bg-gray-100">
        <div class="mb-4 text-[#b22222]">
          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto">
            <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"></path>
            <path d="M18 2v6h6"></path>
            <path d="M18 8L3 23"></path>
            <circle cx="9" cy="9" r="2"></circle>
          </svg>
        </div>
        <p class="text-gray-700">Drag and drop images here or <span class="text-[#b22222] font-semibold">browse</span></p>
        <input type="file" id="imageUpload" class="hidden" accept="image/*" multiple>
      </div>
    </div>
  
    <div class="mt-8">
      <h3 class="text-xl font-['Cormorant_Garamond',_serif] mb-4">Uploaded Images</h3>
      <p class="text-sm text-gray-500 mb-4"><i>Drag and drop images to reorder them</i></p>
      <div id="imageGrid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
        <!-- Placeholder items -->
        <div class="border border-gray-200 rounded-md overflow-hidden transition duration-300 ease-in-out hover:transform hover:-translate-y-1 hover:shadow-md">
          <div class="h-36 bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-[length:200%_100%] animate-shimmer"></div>
          <div class="p-2">
            <div class="h-4 w-4/5 mx-auto bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-[length:200%_100%] animate-shimmer rounded"></div>
          </div>
        </div>
        <div class="border border-gray-200 rounded-md overflow-hidden transition duration-300 ease-in-out hover:transform hover:-translate-y-1 hover:shadow-md">
          <div class="h-36 bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-[length:200%_100%] animate-shimmer"></div>
          <div class="p-2">
            <div class="h-4 w-4/5 mx-auto bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-[length:200%_100%] animate-shimmer rounded"></div>
          </div>
        </div>
        <div class="border border-gray-200 rounded-md overflow-hidden transition duration-300 ease-in-out hover:transform hover:-translate-y-1 hover:shadow-md">
          <div class="h-36 bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-[length:200%_100%] animate-shimmer"></div>
          <div class="p-2">
            <div class="h-4 w-4/5 mx-auto bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-[length:200%_100%] animate-shimmer rounded"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <style>
    @keyframes shimmer {
      to {
        background-position-x: -200%;
      }
    }
    
    .animate-shimmer {
      animation: shimmer 1.5s infinite;
    }

    .dragging {
      opacity: 0.5;
      cursor: move;
    }

    .drag-over {
      border: 2px dashed #b22222 !important;
    }
  </style>
  
  <script>
    // Image upload functionality
    const dropArea = document.getElementById('imageDropArea');
    const fileInput = document.getElementById('imageUpload');
    const imageGrid = document.getElementById('imageGrid');
  
    // Clear placeholder images on first upload
    let placeholdersCleared = false;
  
    // Handle file selection
    fileInput.addEventListener('change', handleFiles);
  
    // Setup drag and drop for file upload
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, preventDefaults, false);
    });
  
    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
  
    ['dragenter', 'dragover'].forEach(eventName => {
      dropArea.addEventListener(eventName, highlight, false);
    });
  
    ['dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, unhighlight, false);
    });
  
    function highlight() {
      dropArea.classList.add('border-[#228b22]', 'bg-[#228b2210]');
      dropArea.classList.remove('border-gray-300', 'hover:border-[#b22222]');
    }
  
    function unhighlight() {
      dropArea.classList.remove('border-[#228b22]', 'bg-[#228b2210]');
      dropArea.classList.add('border-gray-300', 'hover:border-[#b22222]');
    }
  
    dropArea.addEventListener('drop', handleDrop, false);
  
    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      if (files && files.length > 0) {
        handleFiles({ target: { files } });
      }
    }
  
    dropArea.addEventListener('click', () => {
      fileInput.click();
    });
  
    function handleFiles(e) {
      if (!e.target || !e.target.files || e.target.files.length === 0) return;
      
      if (!placeholdersCleared) {
        imageGrid.innerHTML = '';
        placeholdersCleared = true;
      }
  
      const files = e.target.files;
      
      for (let i = 0; i < files.length; i++) {
        uploadFile(files[i]);
      }
    }
  
    function uploadFile(file) {
      if (!file.type.match('image.*')) return;
  
      const reader = new FileReader();
      
      reader.onload = function(e) {
        const imageItem = document.createElement('div');
        imageItem.className = 'border border-gray-200 rounded-md overflow-hidden transition duration-300 ease-in-out hover:transform hover:-translate-y-1 hover:shadow-md';
        imageItem.draggable = true;
        imageItem.dataset.filename = file.name;
        
        // Add event listeners for drag and drop reordering
        imageItem.addEventListener('dragstart', handleDragStart);
        imageItem.addEventListener('dragover', handleDragOver);
        imageItem.addEventListener('dragleave', handleDragLeave);
        imageItem.addEventListener('drop', handleReorderDrop);
        imageItem.addEventListener('dragend', handleDragEnd);
        
        const thumbnailContainer = document.createElement('div');
        thumbnailContainer.className = 'h-36 bg-gray-100';
        
        const thumbnail = document.createElement('img');
        thumbnail.src = e.target.result.toString();
        thumbnail.className = 'w-full h-full object-cover';
        
        const nameContainer = document.createElement('div');
        nameContainer.className = 'p-2';
        
        const imageName = document.createElement('div');
        imageName.className = 'text-sm truncate';
        imageName.textContent = file.name;
        
        const orderIndicator = document.createElement('div');
        orderIndicator.className = 'flex justify-center items-center mt-1';
        
        thumbnailContainer.appendChild(thumbnail);
        nameContainer.appendChild(imageName);
        nameContainer.appendChild(orderIndicator);
        imageItem.appendChild(thumbnailContainer);
        imageItem.appendChild(nameContainer);
        imageGrid.appendChild(imageItem);
      }
      
      reader.readAsDataURL(file);
    }

    // Variables to store drag state
    let draggedItem = null;

    // Drag and Drop Reordering Functionality
    function handleDragStart(e) {
      draggedItem = this;
      setTimeout(() => {
        this.classList.add('dragging');
      }, 0);
      
      // Set the dragged data for compatibility
      e.dataTransfer.effectAllowed = 'move';
      e.dataTransfer.setData('text/plain', this.dataset.filename);
    }

    function handleDragOver(e) {
      if (e.preventDefault) {
        e.preventDefault();
      }
      
      this.classList.add('drag-over');
      e.dataTransfer.dropEffect = 'move';
      
      return false;
    }

    function handleDragLeave(e) {
      this.classList.remove('drag-over');
    }

    function handleReorderDrop(e) {
      e.stopPropagation();
      e.preventDefault();
      
      // Remove visual indicators
      this.classList.remove('drag-over');
      
      // Don't do anything if dropping the same item we're dragging
      if (draggedItem !== this) {
        // Get the positions of both elements
        const allItems = Array.from(imageGrid.children);
        const draggedIndex = allItems.indexOf(draggedItem);
        const dropIndex = allItems.indexOf(this);
        
        // Handle the actual reordering
        if (dropIndex < draggedIndex) {
          // Insert before the drop target
          imageGrid.insertBefore(draggedItem, this);
        } else {
          // Insert after the drop target
          imageGrid.insertBefore(draggedItem, this.nextSibling);
        }
      }
      
      return false;
    }

    function handleDragEnd(e) {
      // Clean up
      this.classList.remove('dragging');
      
      // Reset all elements that might have drag-over class
      const items = document.querySelectorAll('#imageGrid > div');
      items.forEach(item => {
        item.classList.remove('drag-over');
      });
      
      draggedItem = null;
    }
  </script>