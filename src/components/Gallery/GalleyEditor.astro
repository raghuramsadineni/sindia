---
import { Image } from "astro:assets";

const response = await fetch(new URL("/api/gallery", Astro.url));
const galleryImages = await response.json();
---

<div class="w-full">
  <h2 class="text-2xl font-['Cormorant_Garamond',_serif] text-primary mb-6">
    Image Editor
  </h2>

  <div class="mb-8">
    <div
      id="imageDropArea"
      class="border-2 border-dashed border-gray-300 p-8 text-center rounded-lg cursor-pointer transition duration-300 ease-in-out bg-gray-50 hover:border-primary hover:bg-gray-100"
    >
      <div class="mb-4 text-primary">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="48"
          height="48"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="mx-auto"
        >
          <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"
          ></path>
          <path d="M18 2v6h6"></path>
          <path d="M18 8L3 23"></path>
          <circle cx="9" cy="9" r="2"></circle>
        </svg>
      </div>
      <p class="text-gray-700">
        Drag and drop images here or
        <span class="text-primary font-semibold">browse</span>
      </p>
      <input
        type="file"
        id="imageUpload"
        class="hidden"
        accept="image/*"
        multiple
      />
    </div>
  </div>

  <div class="mt-8">
    <div>
      <div>
        <h3 class="text-xl font-['Cormorant_Garamond',_serif] mb-4">
          Uploaded Images
        </h3>
        <p class="text-sm text-gray-500 mb-4">
          <i>Drag and drop images to reorder them</i>
        </p>
      </div>
      <div></div>
    </div>
    <div
      id="imageGrid"
      class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4"
    >
      {
        !!galleryImages && galleryImages.length > 0
          ? galleryImages.map((image) => (
              <>
                <div
                  id={image.id}
                  data-filename={image.filename}
                  draggable="true"
                  class="relative group border border-gray-200 rounded-md overflow-hidden transition duration-300 ease-in-out hover:transform hover:-translate-y-1 hover:shadow-md"
                >
                  <Image
                    src={image.public_url}
                    alt={image.filename}
                    inferSize={true}
                    class="block w-full h-auto"
                  />

                  <div class="p-2">
                    <div class="text-sm truncate">{image.filename}</div>
                  </div>

                  <button
                    type="button"
                    data-filename={image.filename}
                    data-id={image.id}
                    class="absolute top-2 right-2 p-1 bg-white rounded-full shadow opacity-0 group-hover:opacity-100 transition-opacity duration-200 focus:outline-none"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6 mx-auto"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <path
                        d="M10 11V17"
                        stroke="#b22222"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M14 11V17"
                        stroke="#b22222"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M4 7H20"
                        stroke="#b22222"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 7H12H18V18C18 19.6569 16.6569 21 15 21H9C7.34315 21 6 19.6569 6 18V7Z"
                        stroke="#b22222"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5V7H9V5Z"
                        stroke="#b22222"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </>
            ))
          : Array.from({ length: 5 }).map(() => (
              <div class="border border-gray-200 rounded-md overflow-hidden transition duration-300 ease-in-out hover:transform hover:-translate-y-1 hover:shadow-md">
                <div class="h-36 bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-[length:200%_100%] animate-shimmer" />
                <div class="p-2">
                  <div class="h-4 w-4/5 mx-auto bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-[length:200%_100%] animate-shimmer rounded" />
                </div>
              </div>
            ))
      }
    </div>
  </div>
</div>

<style>
  @keyframes shimmer {
    to {
      background-position-x: -200%;
    }
  }

  .animate-shimmer {
    animation: shimmer 1.5s infinite;
  }

  .dragging {
    opacity: 0.5;
    cursor: move;
  }

  .drag-over {
    border: 2px dashed #b22222 !important;
  }
</style>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    const dropArea = document.getElementById("imageDropArea");
    const fileInput = document.getElementById("imageUpload");

    if (!dropArea || !fileInput) return;

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    function highlight() {
      dropArea.classList.add("border-primary", "bg-primary");
    }

    function unhighlight() {
      dropArea.classList.remove("border-primary", "bg-primary");
    }

    async function handleFiles(e) {
      const files = e.target.files || e.dataTransfer?.files;
      if (!files || files.length === 0) return;

      const formData = new FormData();
      for (let i = 0; i < files.length; i++) {
        formData.append("gallery", files[i]);
      }

      await fetch("/api/gallery", {
        method: "POST",
        body: formData,
      });

      location.reload(); // Refresh page after upload
    }

    dropArea.addEventListener("click", () => fileInput.click());
    fileInput.addEventListener("change", handleFiles);

    ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
      dropArea.addEventListener(eventName, preventDefaults, false);
    });
    ["dragenter", "dragover"].forEach((eventName) => {
      dropArea.addEventListener(eventName, highlight, false);
    });
    ["dragleave", "drop"].forEach((eventName) => {
      dropArea.addEventListener(eventName, unhighlight, false);
    });
    dropArea.addEventListener("drop", (e) => handleFiles(e), false);
  });
</script>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    const imageGrid = document.getElementById("imageGrid");
    let draggedItem = null;

    if (!imageGrid) return;

    function handleDragStart(e) {
      draggedItem = this;
      setTimeout(() => this.classList.add("dragging"), 0);

      if (e.dataTransfer) {
        e.dataTransfer.effectAllowed = "move";
        e.dataTransfer.setData("text/plain", this.dataset.filename || "");
      }
    }

    function handleDragOver(e) {
      e.preventDefault();
      this.classList.add("drag-over");
      if (e.dataTransfer) {
        e.dataTransfer.dropEffect = "move";
      }
    }

    function handleDragLeave(e) {
      this.classList.remove("drag-over");
    }

    function handleDrop(e) {
      e.preventDefault();
      e.stopPropagation();

      if (draggedItem !== this) {
        const allItems = Array.from(imageGrid.children);
        const draggedIndex = allItems.indexOf(draggedItem);
        const dropIndex = allItems.indexOf(this);

        if (dropIndex < draggedIndex) {
          imageGrid.insertBefore(draggedItem, this);
        } else {
          imageGrid.insertBefore(draggedItem, this.nextSibling);
        }
      }

      this.classList.remove("drag-over");
    }

    function handleDragEnd() {
      this.classList.remove("dragging");
      const items = imageGrid.querySelectorAll("div[data-filename]");
      items.forEach((item) => item.classList.remove("drag-over"));
      draggedItem = null;
      updateImagesOrder();
    }

    async function updateImagesOrder() {
      const items = imageGrid.querySelectorAll("div[data-filename]");
      const data = [];

      items.forEach((item, index) => {
        const filename = (item as HTMLElement)?.dataset.filename;
        const id = item.id;
        data.push({ filename, id, sort_order: index + 1 });
      });

      const res = await fetch("/api/gallery", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (!res.ok) {
        location.assign("/en/dashboard?error=Failed to update image order");
      }
    }

    const items = imageGrid.querySelectorAll("div[data-filename]");
    items.forEach((item) => {
      item.addEventListener("dragstart", handleDragStart);
      item.addEventListener("dragover", handleDragOver);
      item.addEventListener("dragleave", handleDragLeave);
      item.addEventListener("drop", handleDrop);
      item.addEventListener("dragend", handleDragEnd);
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const imgs = document.querySelectorAll('[data-id]');
    imgs.forEach((el) => {
      const id = el.getAttribute('data-id');
      const btn = document.getElementById(`delete-${id}`);
      btn?.addEventListener('click', async () => {
        await fetch(`/api/gallery`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ id }),
        });
      });
    });
  })
</script>
